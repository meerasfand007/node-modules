{"ast":null,"code":"var _jsxFileName = \"E:\\\\basit\\\\my-app\\\\src\\\\components\\\\form.js\";\nimport React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nconst FormComponent = props => {\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"email\",\n    name: \"email\",\n    id: \"Email\",\n    placeholder: \"with a placeholder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    name: \"password\",\n    id: \"Password\",\n    placeholder: \"password placeholder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"confirmPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    name: \"password\",\n    id: \"confirmPassword\",\n    placeholder: \"password placeholder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n};\n\nInput.propTypes = {\n  children: PropTypes.node,\n  // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n  type: PropTypes.string,\n  size: PropTypes.string,\n  bsSize: PropTypes.string,\n  state: deprecated(PropTypes.string, 'Please use the prop \"valid\"'),\n  valid: PropTypes.bool,\n  // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool,\n  // applied the is-invalid class when true, does nothing when false\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  static: deprecated(PropTypes.bool, 'Please use the prop \"plaintext\"'),\n  plaintext: PropTypes.bool,\n  addon: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nCustomInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  type: PropTypes.string.isRequired,\n  // radio, checkbox, select, range, switch, file.\n  label: PropTypes.string,\n  // used for checkbox and radios\n  inline: PropTypes.bool,\n  valid: PropTypes.bool,\n  // applied the is-valid class when true, does nothing when false\n  invalid: PropTypes.bool,\n  // applied the is-invalid class when true, does nothing when false\n  bsSize: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]),\n  // for type=\"select\"\n  // innerRef would be referenced to select node or input DOM node, depends on type property\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nForm.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  // default: 'form'\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nFormFeedback.propTypes = {\n  children: PropTypes.node,\n  // Pass in a Component to override default element\n  tag: PropTypes.string,\n  // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  // default: undefined\n  tooltip: PropTypes.bool\n};\nFormGroup.propTypes = {\n  children: PropTypes.node,\n  // Applied the row class when true, does nothing when false\n  row: PropTypes.bool,\n  // Applied the form-check class when true, form-group when false\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  // Applied the disabled class when the check and disabled props are true, does nothing when false\n  disabled: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.string,\n  // default: 'div'\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nFormText.propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  // Pass in a Component to override default element\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  // default: 'small'\n  color: PropTypes.string,\n  // default: 'muted'\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nexport default FormComponent;","map":{"version":3,"sources":["E:/basit/my-app/src/components/form.js"],"names":["React","Button","Form","FormGroup","Label","Input","FormText","FormComponent","props","propTypes","children","PropTypes","node","type","string","size","bsSize","state","deprecated","valid","bool","invalid","tag","oneOfType","func","innerRef","static","plaintext","addon","className","cssModule","object","CustomInput","id","number","isRequired","label","inline","array","FormFeedback","tooltip","row","check","disabled","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nconst FormComponent = (props) => {\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <Label for=\"Email\">Email</Label>\r\n        <Input type=\"email\" name=\"email\" id=\"Email\" placeholder=\"with a placeholder\" />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"Password\">Password</Label>\r\n        <Input type=\"password\" name=\"password\" id=\"Password\" placeholder=\"password placeholder\" />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"confirmPassword\">Password</Label>\r\n        <Input type=\"password\" name=\"password\" id=\"confirmPassword\" placeholder=\"password placeholder\" />\r\n      </FormGroup>\r\n      <Button>Submit</Button>\r\n    </Form>\r\n  );\r\n}\r\nInput.propTypes = {\r\n    children: PropTypes.node,\r\n    // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\r\n    type: PropTypes.string,\r\n    size: PropTypes.string,\r\n    bsSize: PropTypes.string,\r\n    state: deprecated(PropTypes.string, 'Please use the prop \"valid\"'),\r\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\r\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\r\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n    // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\r\n    innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n    static: deprecated(PropTypes.bool, 'Please use the prop \"plaintext\"'),\r\n    plaintext: PropTypes.bool,\r\n    addon: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n  };\r\n  \r\n  CustomInput.propTypes = {\r\n    className: PropTypes.string,\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    type: PropTypes.string.isRequired, // radio, checkbox, select, range, switch, file.\r\n    label: PropTypes.string, // used for checkbox and radios\r\n    inline: PropTypes.bool,\r\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\r\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\r\n    bsSize: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\r\n    // innerRef would be referenced to select node or input DOM node, depends on type property\r\n    innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.string,\r\n      PropTypes.func,\r\n    ])\r\n  };\r\n  \r\n  Form.propTypes = {\r\n    children: PropTypes.node,\r\n    inline: PropTypes.bool,\r\n    // Pass in a Component to override default element\r\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\r\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n  };\r\n  \r\n  FormFeedback.propTypes = {\r\n    children: PropTypes.node,\r\n    // Pass in a Component to override default element\r\n    tag: PropTypes.string, // default: 'div'\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n    valid: PropTypes.bool, // default: undefined\r\n    tooltip: PropTypes.bool\r\n  };\r\n  \r\n  FormGroup.propTypes = {\r\n    children: PropTypes.node,\r\n    // Applied the row class when true, does nothing when false\r\n    row: PropTypes.bool,\r\n    // Applied the form-check class when true, form-group when false\r\n    check: PropTypes.bool,\r\n    inline: PropTypes.bool,\r\n    // Applied the disabled class when the check and disabled props are true, does nothing when false\r\n    disabled: PropTypes.bool,\r\n    // Pass in a Component to override default element\r\n    tag: PropTypes.string, // default: 'div'\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n  };\r\n  \r\n  FormText.propTypes = {\r\n    children: PropTypes.node,\r\n    inline: PropTypes.bool,\r\n    // Pass in a Component to override default element\r\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\r\n    color: PropTypes.string, // default: 'muted'\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n  };\r\nexport default FormComponent;"]},"metadata":{},"sourceType":"module"}